{
  "name": "fastgltf",
  "version": "0.7.1",
  "description": "A modern C++17 glTF 2.0 library focused on speed, correctness, and usability",
  "homepage": "https://github.com/spnda/fastgltf",
  "license": "MIT",
  "dependencies": [
    "simdjson",
    {
      "name": "vcpkg-cmake",
      "host": true
    },
    {
      "name": "vcpkg-cmake-config",
      "host": true
    }
  ],
  "features": {
    "use-64bit-float": {
      "description": "Instead of using a normal 32-bit float for all of the types the glTF spec refers to as num, this option instead makes fastgltf use 64-bit double."
    },
    "enable-deprecated-ext": {
      "description": "Deprecated glTF extensions are by default disabled disabled with fastgltf. This option allows users to re-enable these extensions and use them like normally."
    },
    "use-custom-smallvector": {
      "description": "While fastgltf uses its custom SmallVector class in various areas by default, it might be useful to enable it in more places."
    },
    "disable-custom-memory-pool": {
      "description": "fastgltf by default comes with a custom memory allocator which makes use of std::pmr functionality. This allocator allocates fixed-size blocks of memory as needed and divides them up for all heap allocations fastgltf performs. All of this functionality can be disabled using this flag. All types will then be normal std containers and use standard heap allocation with new and malloc."
    },
    "compile-as-cpp20": {
      "description": "This BOOL option controls the C++ standard the library is compiled as. When NO fastgltf is always compiled as C++17. When YES fastgltf is compiled as C++20, including the tests. This might allow the compiler to perform certain optimisations, since fastgltf then uses some specialized stdlib functions instead."
    },
    "enable-cpp-modules": {
      "description": "When this setting is YES the fastgltf::module target will be exposed, as long as the CMake script detects a compiler which supports modules. Note that this is currently not supported by all compilers and generators. See the CMake docs for more details."
    },
    "use-std-module": {
      "description": "This BOOL option makes the fastgltf C++ module import the std module, which is available since C++23. This can have further compiler time benefits, but is only experimentally supported with CMake 3.30 or newer, and only with some toolchains. Therefore, this option should be used with caution and issues are likely."
    }
  }
}
